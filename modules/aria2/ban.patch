diff --git a/src/DefaultBtInteractive.cc b/src/DefaultBtInteractive.cc
index da68aa95..18de16c5 100644
--- a/src/DefaultBtInteractive.cc
+++ b/src/DefaultBtInteractive.cc
@@ -35,6 +35,7 @@
 #include "DefaultBtInteractive.h"
 
 #include <cstring>
+#include <regex>
 #include <vector>
 
 #include "prefs.h"
@@ -138,6 +139,14 @@ DefaultBtInteractive::receiveHandshake(bool quickReply)
           fmt("CUID#%" PRId64 " - Same Peer ID has been already seen.", cuid_));
     }
   }
+  char peerId[PEER_ID_LENGTH];
+  memcpy(peerId, message->getPeerId(), PEER_ID_LENGTH);
+  std::regex peerRegex("^-(XL|SD|XF|QD|BN|DL|DT)(\\d+)-");
+  if (std::regex_search(peerId, peerRegex)) {
+    peerStorage_->banPeer(peer_->getIPAddress());
+    throw DL_ABORT_EX(
+        fmt("CUID#%" PRId64 " - Peer %s banned.", cuid_, peerId));
+  }
 
   peer_->setPeerId(message->getPeerId());
 
diff --git a/src/DefaultPeerStorage.cc b/src/DefaultPeerStorage.cc
index b4a9fc00..3dbd8cee 100644
--- a/src/DefaultPeerStorage.cc
+++ b/src/DefaultPeerStorage.cc
@@ -107,6 +107,11 @@ bool DefaultPeerStorage::addPeer(const std::shared_ptr<Peer>& peer)
                      peer->getIPAddress().c_str(), peer->getPort()));
     return false;
   }
+  if (isBannedPeer(peer->getIPAddress())) {
+    A2_LOG_DEBUG(fmt("Adding %s:%u is rejected because it is marked banned.",
+                     peer->getIPAddress().c_str(), peer->getPort()));
+    return false;
+  }
   const size_t peerListSize = unusedPeers_.size();
   if (peerListSize >= maxPeerListSize_) {
     deleteUnusedPeer(peerListSize - maxPeerListSize_ + 1);
@@ -134,6 +139,12 @@ void DefaultPeerStorage::addPeer(
                          peer->getIPAddress().c_str(), peer->getPort()));
         continue;
       }
+      else if (isBannedPeer(peer->getIPAddress())) {
+        A2_LOG_DEBUG(
+            fmt("Adding %s:%u is rejected because it is marked banned.",
+                peer->getIPAddress().c_str(), peer->getPort()));
+        continue;
+      }
       else {
         A2_LOG_DEBUG(fmt(MSG_ADDING_PEER, peer->getIPAddress().c_str(),
                          peer->getPort()));
@@ -257,6 +268,23 @@ void DefaultPeerStorage::addBadPeer(const std::string& ipaddr)
   badPeers_[ipaddr] = std::move(t);
 }
 
+bool DefaultPeerStorage::isBannedPeer(const std::string& ipaddr)
+{
+  return bannedPeers_.find(ipaddr) != bannedPeers_.end();
+}
+
+void DefaultPeerStorage::banPeer(const std::string& ipaddr)
+{
+  if (isBannedPeer(ipaddr)) {
+    A2_LOG_WARN(fmt("Peer %s is already banned.", ipaddr.c_str()));
+  }
+  else {
+    if (bannedPeers_.size() > maxPeerListSize_)
+      bannedPeers_.clear();
+    bannedPeers_.insert(ipaddr);
+  }
+}
+
 void DefaultPeerStorage::deleteUnusedPeer(size_t delSize)
 {
   for (; delSize > 0 && !unusedPeers_.empty(); --delSize) {
diff --git a/src/DefaultPeerStorage.h b/src/DefaultPeerStorage.h
index 4ba716aa..46aaf2f5 100644
--- a/src/DefaultPeerStorage.h
+++ b/src/DefaultPeerStorage.h
@@ -39,6 +39,7 @@
 
 #include <string>
 #include <map>
+#include <unordered_set>
 
 #include "TimerA2.h"
 
@@ -74,6 +75,8 @@ private:
   std::map<std::string, Timer> badPeers_;
   Timer lastBadPeerCleaned_;
 
+  std::unordered_set<std::string> bannedPeers_;
+
   bool isPeerAlreadyAdded(const std::shared_ptr<Peer>& peer);
   void addUniqPeer(const std::shared_ptr<Peer>& peer);
 
@@ -110,6 +113,10 @@ public:
 
   virtual void addBadPeer(const std::string& ipaddr) CXX11_OVERRIDE;
 
+  virtual bool isBannedPeer(const std::string& ipaddr) CXX11_OVERRIDE;
+
+  virtual void banPeer(const std::string& ipaddr) CXX11_OVERRIDE;
+
   virtual std::shared_ptr<Peer> checkoutPeer(cuid_t cuid) CXX11_OVERRIDE;
 
   virtual void returnPeer(const std::shared_ptr<Peer>& peer) CXX11_OVERRIDE;
diff --git a/src/PeerStorage.h b/src/PeerStorage.h
index cc77c515..c5008691 100644
--- a/src/PeerStorage.h
+++ b/src/PeerStorage.h
@@ -105,6 +105,10 @@ public:
    */
   virtual void addBadPeer(const std::string& ipaddr) = 0;
 
+  virtual bool isBannedPeer(const std::string& ipaddr) = 0;
+
+  virtual void banPeer(const std::string& ipaddr) = 0;
+
   /**
    * Moves first peer in unused peer list to used peer set and calls
    * Peer::usedBy(cuid). If there is no peer available, returns
